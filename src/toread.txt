import React from "react";
import Feed from "./Feed";
import { useHistory } from "react-router-dom";
import { useState, useEffect } from "react";
import { format } from "date-fns";
import api from "./api/posts";
import useWindowSize from "./hooks/useWindowSize";
import useAxiosFetch from "./hooks/useAxiosFetch";
import { useNavigate } from "react-router-dom";
// import { DataProvider } from './context/DataContext';
// import SomethingWrong from "./components/SomethingWrong";

function BlogIndex() {
  const [posts, setPosts] = useState([]);
  const [search, setSearch] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState("");
  const [postBody, setPostBody] = useState("");
  const [editTitle, setEditTitle] = useState("");
  const [editBody, setEditBody] = useState("");
  const history = useHistory();
  // resize
  const { width } = useWindowSize();
  const navigate = useNavigate();

  //recupero dati 
 const { data, fetchError,isLoading} = useAxiosFetch('http://localhost:3500/posts');

 useEffect(()=>{
    setPosts(data);
 },[data]);

 useEffect(() => {
    const filteredResults = posts.filter((post) =>
      ((post.body).toLowerCase()).includes(search.toLowerCase())
      || ((post.title).toLowerCase()).includes(search.toLowerCase()));

    setSearchResults(filteredResults.reverse());
  }, [posts, search])

const handleSubmit = async (e) =>{
    e.preventDefault();
    const id = posts.length ? posts[posts.length -1].id +1 :1;
    const datetime = format(new Date(), 'MMMM dd, yyyy pp');
    const newPost ={id,title :postTitle, datetime,body:postBody};
    try{
        const response = await api.post('/posts', newPost);
        const allPosts =[...posts,response.data];
        setPosts(allPosts);
        setPostTitle("");
        setPostBody("");
        history.push('/BlogIndex');
        // history.push('/');
    }catch(err){
        console.log(`Error: ${err.message}`);
        navigate("/SomethingWrong");
    }
}

const handleEdit = async(id)=>{
    const datetime = format(new Date(), 'MMMM dd, yyyy pp');
    const updatedPost = {id,title:editTitle, datetime, body:editBody};
    try {
        const response = await api.put(`/posts/${id}`,updatedPost);
        setPosts(posts.map(post=> post.id ===id?{...response.data}: post));
        setEditTitle('');
        setEditBody('');
        history.push();
    } catch (err) {
        console.log(`Error: ${err.message}`);
        navigate("/SomethingWrong");
    }
}

const handleDelete=async(id)=>{
    try {
        await api.delete(`/posts/${id}`);
        const postList = posts.filter(post=>post.id != id);
        setPosts(postList);
        // history.push('/');
        history.push('/BlogIndex');
    } catch (err) {
        console.log(`Error: ${err.message}`);
        navigate("/SomethingWrong");
    }
}


  return (
    <main className="Home">
      {isLoading && <p className="statusMsg">Loading...</p>}
      {!isLoading && fetchError && (
        <p className="statusMsg" style={{ color: "red" }}>
          {fetchError}
        </p>
      )}
      {!isLoading &&
        !fetchError &&
        (posts.length ? (
          <Feed posts={posts} />
        ) : (
          <p className="statusMsg">No posts to display.</p>
        ))}
    </main>
  );
}

export default BlogIndex;
